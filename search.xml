<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Scala Actor 并发编程模型</title>
      <link href="/2022/12/01/Scala%20Actor%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/"/>
      <url>/2022/12/01/Scala%20Actor%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-Actor-并发编程模型"><a href="#Scala-Actor-并发编程模型" class="headerlink" title="Scala Actor 并发编程模型"></a>Scala Actor 并发编程模型</h2><p>​    <code>Actor</code>并发编程模型，是 Scala 提供的一直与 Java 完全不一样的并发编程模型，是一直基于事件模型的并发机制。<code>Actor</code>并发编程模型是一种不共享数据，依赖消息传递的并发编程模型，有效避免了资源争夺、死锁等现象。</p><p><img src="http://chongyan-blog.test.upcdn.net/md-images/image-20220722002202875.png" alt="image-20220722002202875" style="zoom:50%;" /></p><p><code>Actor</code>是一种基于事件(消息)的并发编程模型，不共享数据，有效避免了共享数据加锁问题。</p><h3 id="Java并发编程对比-Actor-并发编程模型"><a href="#Java并发编程对比-Actor-并发编程模型" class="headerlink" title="Java并发编程对比 Actor 并发编程模型"></a>Java并发编程对比 Actor 并发编程模型</h3><div class="table-container"><table><thead><tr><th>Java并发编程</th><th style="text-align:center"><code>Actor</code> 并发编程模型</th></tr></thead><tbody><tr><td>共享数据锁模型(share data and lock)</td><td style="text-align:center">share nothing</td></tr><tr><td>每个 object 都有一个<code>monitor</code>，用来监视对共享数据的访问</td><td style="text-align:center">不共享数据，<code>Actor</code>直接通过<code>Message</code>通讯</td></tr><tr><td>加锁代码使用<code>synchronized</code>标识</td><td style="text-align:center"></td></tr><tr><td>死锁问题</td><td style="text-align:center">每个<code>Actor</code>内部是顺序执行的</td></tr><tr><td>每个线程内部是顺序执行的</td><td style="text-align:center">每个<code>Actor</code>内部是顺序执行的</td></tr></tbody></table></div><p>Scala 在 2.11 及之后的版本中加入了<code>Akka</code>并发编程框架，<code>Actor</code>并发编程模型已经被废弃了。</p><h3 id="创建-Actor"><a href="#创建-Actor" class="headerlink" title="创建 Actor"></a>创建 Actor</h3><p>可以通过类(Class)或者单例对象(Object)继承<code>Actor</code>特质的方式来创建<code>Actor</code>对象</p><h4 id="通过类实现创建Actor对象"><a href="#通过类实现创建Actor对象" class="headerlink" title="通过类实现创建Actor对象"></a>通过类实现创建<code>Actor</code>对象</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myActor1</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) println(<span class="string">&quot;myActor1---&quot;</span> + i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">myActor2</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">11</span> to <span class="number">20</span>) println(<span class="string">&quot;myActor2---&quot;</span> + i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">val</span> myActor1: myActor1 = <span class="keyword">new</span> myActor1()</span><br><span class="line">  myActor1.start()</span><br><span class="line">  <span class="keyword">new</span> myActor2().start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过单例对象实现创建<code>Actor</code>对象</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myActor1</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) println(<span class="string">&quot;myActor1---&quot;</span> + i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">myActor2</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">11</span> to <span class="number">20</span>) println(<span class="string">&quot;myActor2---&quot;</span> + i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  myActor1.start()</span><br><span class="line">  myActor2.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送以及接收消息"><a href="#发送以及接收消息" class="headerlink" title="发送以及接收消息"></a>发送以及接收消息</h3><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><ol><li><code>!</code>：发送异步消息，没有返回值</li><li><code>!?</code>：发送同步消息，等待返回值</li><li><code>!!</code>：发送异步消息，返回值是 <code>Future[Any]</code></li></ol><p>如下给<code>myActor1</code>发送一个异步字符串消息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myActor1 ! <span class="string">&quot;你好&quot;</span></span><br></pre></td></tr></table></figure><h4 id="接收消息"><a href="#接收消息" class="headerlink" title="接收消息"></a>接收消息</h4><p><code>Actor</code>中使用<code>receive</code> 方法来接收消息，需要传入一个偏函数<br><code>receive</code> 方法值接收一次消息，接收完成后进行执行<code>act()</code>方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorSender</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="type">ActorReceiver</span> ! <span class="string">&quot;你好&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorReceiver</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    receive &#123;</span><br><span class="line">      <span class="keyword">case</span> msg: <span class="type">String</span> =&gt; println(msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="type">ActorSender</span>.start()</span><br><span class="line">  <span class="type">ActorReceiver</span>.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="持续发送和接收消息"><a href="#持续发送和接收消息" class="headerlink" title="持续发送和接收消息"></a>持续发送和接收消息</h4><p>用 <code>while</code>循环来持续不断的发送和接收消息</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorSender</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="type">ActorReceiver</span> ! <span class="string">&quot;你好&quot;</span></span><br><span class="line">      <span class="type">Thread</span> sleep <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorReceiver</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">      receive &#123;</span><br><span class="line">        <span class="keyword">case</span> msg: <span class="type">String</span> =&gt; println(msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="type">ActorSender</span>.start()</span><br><span class="line">  <span class="type">ActorReceiver</span>.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>问题</strong>：</p><ol><li>如果当前<code>Actor</code>没有接收到消息，线程就会处于阻塞状态。如果很多的<code>Actor</code>，就会导致很多线程处于阻塞状态</li><li>每次有新的消息进来，都会重新创建新的线程来处理。这种频繁的线程创建、销毁和切换会影响影响效率</li></ol><p><strong>解决办法</strong>：通过<code>loop()</code>结合<code>react()</code>来复用多线程</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorSender</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    loop &#123;</span><br><span class="line">      <span class="type">ActorReceiver</span> ! <span class="string">&quot;你好&quot;</span></span><br><span class="line">      <span class="type">Thread</span> sleep <span class="number">1000</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ActorReceiver</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    loop &#123;</span><br><span class="line">      react &#123;</span><br><span class="line">        <span class="keyword">case</span> msg: <span class="type">String</span> =&gt; println(msg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="type">ActorSender</span>.start()</span><br><span class="line">  <span class="type">ActorReceiver</span>.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送和接收自定义消息"><a href="#发送和接收自定义消息" class="headerlink" title="发送和接收自定义消息"></a>发送和接收自定义消息</h4><p>在此之前我们发送的消息都是字符串类型的，显然这样并不常见，因此我们需要能够自定义发送的消息类型。例如可以用<code>样例类</code>封装消息，然后进行发送处理</p><h5 id="发送接收同步有返回消息"><a href="#发送接收同步有返回消息" class="headerlink" title="发送接收同步有返回消息"></a>发送接收同步有返回消息</h5><blockquote><p><strong>使用<code>!?</code></strong></p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span>(<span class="params">id: <span class="type">Int</span>, message: <span class="type">String</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">ReplyMessage</span>(<span class="params">message: <span class="type">String</span>, name: <span class="type">String</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MessageActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    loop &#123;</span><br><span class="line">      react &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="type">Message</span>(id: <span class="type">Int</span>, message: <span class="type">String</span>) =&gt;</span><br><span class="line">          println(<span class="string">s&quot;id = <span class="subst">$id</span>,message = <span class="subst">$message</span> &quot;</span>)</span><br><span class="line">          sender ! <span class="type">ReplyMessage</span>(<span class="string">&quot;你也好&quot;</span>，<span class="string">&quot;MessageActor&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="type">MessageActor</span>.start()</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">Any</span> = <span class="type">MessageActor</span> !? <span class="type">Message</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> replyMessage: <span class="type">ReplyMessage</span> = res.asInstanceOf[<span class="type">ReplyMessage</span>]</span><br><span class="line">  println(<span class="string">s&quot;MainActor接收到MessageActor返回的消息是: <span class="subst">$&#123;replyMessage.message&#125;</span> and <span class="subst">$&#123;replyMessage.name&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="发送异步无返回消息"><a href="#发送异步无返回消息" class="headerlink" title="发送异步无返回消息"></a>发送异步无返回消息</h5><blockquote><p><strong>使用<code>!</code></strong></p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MessageActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">     loop &#123;</span><br><span class="line">       react &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="type">Message</span>(id: <span class="type">Int</span>, message: <span class="type">String</span>) =&gt;</span><br><span class="line">           println(<span class="string">s&quot;id = <span class="subst">$id</span>,message = <span class="subst">$message</span> &quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="type">MessageActor</span>.start()</span><br><span class="line">   <span class="type">MessageActor</span> ! <span class="type">Message</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="发送接收异步有返回消息"><a href="#发送接收异步有返回消息" class="headerlink" title="发送接收异步有返回消息"></a>发送接收异步有返回消息</h5><blockquote><p><strong>使用<code>!!</code></strong></p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MessageActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">   <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">     loop &#123;</span><br><span class="line">       react &#123;</span><br><span class="line">         <span class="keyword">case</span> <span class="type">Message</span>(id: <span class="type">Int</span>, message: <span class="type">String</span>) =&gt;</span><br><span class="line">           println(<span class="string">s&quot;id = <span class="subst">$id</span>,message = <span class="subst">$message</span> &quot;</span>)</span><br><span class="line">           sender ! <span class="type">ReplyMessage</span>(<span class="string">&quot;你也好&quot;</span>， <span class="string">&quot;MessageActor&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">   <span class="type">MessageActor</span>.start()</span><br><span class="line">   <span class="type">MessageActor</span> !! <span class="type">Message</span>(<span class="number">1</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;继续执行...&quot;</span>)</span><br><span class="line">   <span class="keyword">val</span> replyMessage: <span class="type">ReplyMessage</span> = res.asInstanceOf[<span class="type">ReplyMessage</span>]</span><br><span class="line">     println(<span class="string">s&quot;MainActor接收到MessageActor返回的消息是: <span class="subst">$&#123;replyMessage.message&#125;</span> from <span class="subst">$&#123;replyMessage.name&#125;</span>&quot;</span>)</span><br><span class="line">   println(<span class="string">&quot;MainActor接收成功...&quot;</span>)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="同步消息和异步消息区别"><a href="#同步消息和异步消息区别" class="headerlink" title="同步消息和异步消息区别"></a>同步消息和异步消息区别</h5><p><code>同步消息</code>：必须接收到回复信息，程序才会继续执行<br><code>异步消息</code>：即使没有接收到回复信息，程序也会继续执行</p><h3 id="Actor-实现-WordCount-案例"><a href="#Actor-实现-WordCount-案例" class="headerlink" title="Actor 实现 WordCount 案例"></a>Actor 实现 WordCount 案例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chongyan.wordcount</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"><span class="keyword">import</span> scala.actors.&#123;<span class="type">Actor</span>, <span class="type">Future</span>&#125;</span><br><span class="line"><span class="keyword">import</span> scala.io.<span class="type">Source</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MainActor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 1. 获取所有要统计的文件的路径</span></span><br><span class="line">    <span class="comment">// 1.1 定义变量 dir,记录保存的所有文件的文件夹路径</span></span><br><span class="line">    <span class="keyword">var</span> dir = <span class="string">&quot;./data/&quot;</span></span><br><span class="line">    <span class="comment">// 1.2 获取文件夹下所有的文件名</span></span><br><span class="line">    <span class="keyword">var</span> fileNameList = <span class="keyword">new</span> <span class="type">File</span>(dir).list().toList</span><br><span class="line">    <span class="comment">//println(fileNameList)</span></span><br><span class="line">    <span class="comment">// 1.3 对获取到的文件名进行拼接</span></span><br><span class="line">    <span class="keyword">val</span> fileDirList: <span class="type">List</span>[<span class="type">String</span>] = fileNameList.map(dir + _)</span><br><span class="line">    <span class="comment">//println(fileDirList)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根据文件数量创建对应个数的 WordCountActor 对象</span></span><br><span class="line">    <span class="comment">// 2.1 先创建 WordCountActor 类，用来获取 WordCountActor 对象</span></span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountTask</span>(<span class="params">fileName: <span class="type">String</span></span>)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountResult</span>(<span class="params"><span class="type">WordCountList</span>: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span></span>)])</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WordCountActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">act</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        loop &#123;</span><br><span class="line">          <span class="comment">// 3.4 接收具体任务</span></span><br><span class="line">          react &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="type">WordCountTask</span>(fileName) =&gt;</span><br><span class="line">            <span class="comment">// 3.5 打印具体任务</span></span><br><span class="line">            println(<span class="string">s&quot;获取到的任务是 <span class="subst">$fileName</span>&quot;</span>)</span><br><span class="line">            <span class="comment">// 4. 统计接收到的文件中的每个单词的数量</span></span><br><span class="line">            <span class="comment">// 4.1 获取指定文件中的所有单词</span></span><br><span class="line">            <span class="keyword">val</span> linesList: <span class="type">List</span>[<span class="type">String</span>] = <span class="type">Source</span>.fromFile(fileName).getLines().toList</span><br><span class="line">            <span class="comment">// 4.2 将上述获取的数据，转换成一个个的单词</span></span><br><span class="line">            <span class="keyword">val</span> wordsList: <span class="type">List</span>[<span class="type">String</span>] = linesList.flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">            <span class="comment">// 4.3 给每个字符串(单词)后面都加上次数，默认为 1</span></span><br><span class="line">            <span class="keyword">val</span> wordsTimesList: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordsList.map((_, <span class="number">1</span>))</span><br><span class="line">            <span class="comment">// 4.4 安按照字符串内容(单词本身的值)进行分组</span></span><br><span class="line">            <span class="keyword">val</span> wordsCountList: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)]] = wordsTimesList.groupBy(_._1)</span><br><span class="line">            <span class="comment">// 4.5 对分组后的内容进行排序，统计每个单词的总数量</span></span><br><span class="line">            <span class="keyword">val</span> <span class="type">WordCountList</span>: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = wordsCountList.map &#123;</span><br><span class="line">              wordsCountMap =&gt;</span><br><span class="line">              (wordsCountMap._1, wordsCountMap._2.map(_._2).sum)</span><br><span class="line">            &#125;.toList</span><br><span class="line">            <span class="comment">// 4.6 打印统计后的结果</span></span><br><span class="line">            println(<span class="type">WordCountList</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 将统计后的结果返回给 MainActor</span></span><br><span class="line">            <span class="comment">// 5.1 返回具体的值</span></span><br><span class="line">            sender ! <span class="type">WordCountResult</span>(<span class="type">WordCountList</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.2 根据文件数量创建对应个数的 WordCountActor 对象</span></span><br><span class="line">    <span class="keyword">val</span> wordCountActorsList: <span class="type">List</span>[<span class="type">WordCountActor</span>] = fileNameList.map(_ =&gt; <span class="keyword">new</span> <span class="type">WordCountActor</span>)</span><br><span class="line">    <span class="comment">// 2.3 将 WordCountActor 对象和文件的全路径关联在一起</span></span><br><span class="line">    <span class="keyword">val</span> actorWithFile: <span class="type">List</span>[(<span class="type">WordCountActor</span>, <span class="type">String</span>)] = wordCountActorsList.zip(fileDirList)</span><br><span class="line">    <span class="comment">//println(actorWithFile)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 启动所有 WordCountActor 对象，并发送单词统计任务消息给每个 WordCountActor 对象</span></span><br><span class="line">    <span class="keyword">val</span> fatureList: <span class="type">List</span>[<span class="type">Future</span>[<span class="type">Any</span>]] = actorWithFile.map &#123;</span><br><span class="line">      actorAndFile =&gt;</span><br><span class="line">      <span class="comment">// 3.1 获取启动具体 WordCountActor 对象</span></span><br><span class="line">      <span class="keyword">val</span> actor: <span class="type">WordCountActor</span> = actorAndFile._1</span><br><span class="line">      <span class="keyword">val</span> fileName: <span class="type">String</span> = actorAndFile._2</span><br><span class="line">      <span class="comment">// 3.2 启动具体 WordCountActor 对象</span></span><br><span class="line">      actor.start()</span><br><span class="line">      <span class="comment">// 3.3 给每个 WordCountActor 发送具体任务(文件路径)，异步有返回</span></span><br><span class="line">      <span class="keyword">val</span> fature: <span class="type">Future</span>[<span class="type">Any</span>] = actor !! <span class="type">WordCountTask</span>(fileName)</span><br><span class="line">      fature</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 5.2 判断所有的 fature 是否都是返回值，如果都是返回值，则继续往下执行</span></span><br><span class="line">    <span class="keyword">while</span> (fatureList.exists(!_.isSet)) &#123;&#125;</span><br><span class="line">    <span class="comment">// 5.3 从每个 fature 中获取数据</span></span><br><span class="line">    <span class="keyword">val</span> <span class="type">WordCountLists</span>: <span class="type">List</span>[<span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)]] = fatureList</span><br><span class="line">    .map(_.apply()</span><br><span class="line">         .asInstanceOf[<span class="type">WordCountResult</span>]</span><br><span class="line">         .<span class="type">WordCountList</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> <span class="type">WordCountList</span>: <span class="type">List</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = <span class="type">WordCountLists</span>.flatten.groupBy(_._1).map &#123;</span><br><span class="line">      wordsCountMap =&gt;</span><br><span class="line">      (wordsCountMap._1, wordsCountMap._2.map(_._2).sum)</span><br><span class="line">    &#125;.toList</span><br><span class="line">    <span class="comment">// 6. 统计并打印</span></span><br><span class="line">    println(<span class="type">WordCountList</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Actor </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala Akka 并发编程框架</title>
      <link href="/2022/12/01/Scala%20Akka%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/12/01/Scala%20Akka%20%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-Akka-并发编程框架"><a href="#Scala-Akka-并发编程框架" class="headerlink" title="Scala Akka 并发编程框架"></a>Scala Akka 并发编程框架</h2><h3 id="什么是-Akka"><a href="#什么是-Akka" class="headerlink" title="什么是 Akka?"></a>什么是 <code>Akka</code>?</h3><p>​    <code>Akka</code>是一个用于构建高并发、分布式和可扩展的基于事件驱动的应用程序工具包。<code>Akka</code>是使用 Scala 开发的库，可以支持 Scala 和 Java 语言来开发基于 <code>Akka</code> 的应用程序。</p><h3 id="Akka的特性"><a href="#Akka的特性" class="headerlink" title="Akka的特性"></a><code>Akka</code>的特性</h3><ul><li>通过基于异步非阻塞、高性能的事件驱动编程模型</li><li>内置容错机制，是循序<code>Actor</code>在出错是进行恢复或者重置操作</li><li>超级轻量级的事件处理(每 GB 对内存可以运行几百万<code>Actor</code>)</li><li>使用<code>Akka</code>可以在单机上构建高并发程序，也可以在网络中构建分布式程序</li></ul><h3 id="Akka通讯过程"><a href="#Akka通讯过程" class="headerlink" title="Akka通讯过程"></a><code>Akka</code>通讯过程</h3><p><img src="http://chongyan-blog.test.upcdn.net/md-images/image-20220723201001929.png" alt="image-20220723201001929" style="zoom:50%;" /></p><ol><li>学生创建一个<code>ActorSystem</code></li><li>通过<code>ActorSystem</code>来创建一个<code>ActorRef</code>（老师的引用），并将消息发送给<code>ActorRef</code></li><li><code>ActorRef</code>将消息发送给<code>Message Dispatcher</code>（消息分发器）</li><li><code>Message Dispatcher</code>将消息按照顺序保存到目标Actor的MailBox中</li><li><code>Message Dispatcher</code>将<code>MailBox</code>放到一个线程中</li><li><code>MailBox</code>按照顺序取出消息，最终将它递给<code>TeacherActor</code>接受的方法中</li></ol><h3 id="创建Actor"><a href="#创建Actor" class="headerlink" title="创建Actor"></a>创建<code>Actor</code></h3><p>​    <code>Akka</code>中，也是基于<code>Actor</code>来进行编程的。类似于<code>Actor</code>。但是<code>Akka</code>中的<code>Actor</code>的编写、创建方法和之前有一些不一样。</p><h4 id="API介绍"><a href="#API介绍" class="headerlink" title="API介绍"></a>API介绍</h4><ul><li><code>ActorSystem</code>: 它负责创建和监督<code>Actor</code></li></ul><blockquote><ol><li>在<code>Akka</code>中，<code>ActorSystem</code>是一个重量级的结构，它需要分配多个线程</li><li>在实际应用中， <code>ActorSystem</code>通常是一个单例对象， 可以使用它创建很多<code>Actor</code></li><li>直接使用<code>context.system</code>就可以获取到管理该<code>Actor</code>的<code>ActorSystem</code>的引用</li></ol></blockquote><ul><li>实现<code>Actor</code>类</li></ul><blockquote><ol><li>定义类或者单例对象继承<code>Actor</code><strong>（注意：要导入akka.actor包下的Actor）</strong></li><li>实现<code>receive</code>方法，<code>receive</code>方法中<strong>直接处理消息</strong>即可，不需要添加<code>loop</code>和<code>react</code>方法调用. Akka会自动调用receive来接收消息</li><li>还可以实现<code>preStart()</code>方法， 该方法在<code>Actor</code>对象构建后执行，在<code>Actor</code>生命周期中仅执行一次.</li></ol></blockquote><ul><li>加载<code>Actor</code></li></ul><blockquote><ol><li>要创建Akka的<code>Actor</code>，必须要先获取创建一个<code>ActorSystem</code>。需要给<code>ActorSystem</code>指定一个名称，并可以去加载一些配置项</li><li>调用<code>ActorSystem.actorOf(Props(Actor对象)， &quot;Actor名字&quot;)</code>来加载<code>Actor</code></li></ol></blockquote><h4 id="Actor-Path"><a href="#Actor-Path" class="headerlink" title="Actor Path"></a>Actor Path</h4><p>每一个<code>Actor</code>都有一个<code>Path</code>，这个路径可以被外部引用。路径的格式如下：</p><div class="table-container"><table><thead><tr><th><strong>Actor类型</strong></th><th><strong>路径</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td>本地Actor</td><td>akka://actorSystem名称/user/Actor名称</td><td>akka://SimpleAkkaDemo/user/senderActor</td></tr><tr><td>远程Actor</td><td>akka.tcp://my-sys@ip地址:port/user/Actor名称</td><td>akka.tcp://192.168.10.17:5678/user/service-b</td></tr></tbody></table></div><h4 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h4><ol><li>定义<code>SenderActor</code>类</li><li>定义<code>ReceiverActor</code>类</li><li>定义<code>Entrance</code>主运行类</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在 Actor 编程模型中:实现 act() 方法，如果想持续接收消息，需要通过 loop() + react() 组合方式实现</span></span><br><span class="line"><span class="comment"> * 在 Akka 编程模型中:实现 receive() 方法，直接在该方法中提供偏函数来处理数据即可</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SenderActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> x =&gt; println(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ReceiverActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> x =&gt; println(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Entrance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> actorSystem: <span class="type">ActorSystem</span> = <span class="type">ActorSystem</span>(<span class="string">&quot;actorSystem&quot;</span>， <span class="type">ConfigFactory</span>.load())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> senderActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">SenderActor</span>)， <span class="string">&quot;senderActor&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> receiverActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">ReceiverActor</span>)， <span class="string">&quot;receiverActor&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送和接收消息"><a href="#发送和接收消息" class="headerlink" title="发送和接收消息"></a>发送和接收消息</h3><ol><li>使用样例类封装消息</li></ol><ul><li><code>SubmitTaskMessage</code>提交任务消息</li><li><code>SuccessSubmitTaskMessage</code>任务提交成功消息</li></ul><ol><li>使用<code>!</code>发送消息</li></ol><p><code>SenderActor.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SenderActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="comment">// 1. 接收 Entrance 发送过来的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;start&quot;</span> =&gt;</span><br><span class="line">      <span class="comment">// 2. 获取 ReceiverActor 的路径</span></span><br><span class="line">      <span class="keyword">val</span> receiverActorSelection: <span class="type">ActorSelection</span> = context.actorSelection(<span class="string">&quot;akka://actorSystem/user/receiverActor&quot;</span>)</span><br><span class="line">      <span class="comment">// 3. 给 ReceiverActor 返回消息，用样例类封装</span></span><br><span class="line">      receiverActorSelection ! <span class="type">SubmitTaskMessage</span>(<span class="string">&quot;我是 SenderActor ，我在给你发消息&quot;</span>)</span><br><span class="line">    <span class="comment">// 4. 接收 ReceiverActor 返回的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">SuccessSubmitTaskMessage</span>(msg) =&gt;</span><br><span class="line">      println(<span class="string">s&quot;SenderActor 接收到的消息是，<span class="subst">$msg</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ReceiverActor.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ReceiverActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">SubmitTaskMessage</span>(msg) =&gt;</span><br><span class="line">      println(<span class="string">s&quot;我是 ReceiverActor ，我接收到的消息是:<span class="subst">$msg</span>&quot;</span>)</span><br><span class="line">      sender ! <span class="type">SuccessSubmitTaskMessage</span>(<span class="string">&quot;我是 ReceiverActor ，接收成功&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Entrance.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Entrance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> actorSystem: <span class="type">ActorSystem</span> = <span class="type">ActorSystem</span>(<span class="string">&quot;actorSystem&quot;</span>， <span class="type">ConfigFactory</span>.load())</span><br><span class="line">    <span class="keyword">val</span> senderActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">SenderActor</span>)， <span class="string">&quot;senderActor&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> receiverActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">ReceiverActor</span>)， <span class="string">&quot;receiverActor&quot;</span>)</span><br><span class="line">    senderActor ! <span class="string">&quot;start&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Akka定时任务"><a href="#Akka定时任务" class="headerlink" title="Akka定时任务"></a><code>Akka</code>定时任务</h3><p>通过 <code>ActorSystem.scheduler.schedule()方法</code>， 启动定时任务</p><ul><li>方式一：采用<code>发送消息</code>方式实现</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">def</span> <span class="title">schedule</span></span>(</span><br><span class="line">  initialDelay : <span class="type">FiniteDuration</span>, <span class="comment">// 首次开始， 按此设定的时间， 延迟后执行</span></span><br><span class="line">  interval : <span class="type">FiniteDuration</span>, <span class="comment">// 每隔多久执行一次(首次开始， 立马执行， 不延时)</span></span><br><span class="line">  receiver : <span class="type">ActorRef</span>, <span class="comment">// 设置目标接收消息的 Actor</span></span><br><span class="line">  message : <span class="type">Any</span>) <span class="comment">// 要发送的消息</span></span><br><span class="line">(<span class="keyword">implicit</span> executor : <span class="type">ExecutionContext</span>, sender : <span class="type">ActorRef</span> = &#123;&#125;) <span class="comment">// 隐式参数， 需导入</span></span><br></pre></td></tr></table></figure><ul><li>方式二：采用<code>自定义消息</code>方式实现</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="function"><span class="keyword">def</span> <span class="title">schedule</span></span>(</span><br><span class="line">initialDelay : <span class="type">FiniteDuration</span>, <span class="comment">// 首次开始， 按此设定的时间， 延迟后执行</span></span><br><span class="line">interval : <span class="type">FiniteDuration</span> <span class="comment">// 每隔多久执行一次(首次开始， 立马执行， 不延时</span></span><br><span class="line">)(f : =&gt; <span class="type">Unit</span>) <span class="comment">// 定期要执行的函数(消息</span></span><br><span class="line">(<span class="keyword">implicit</span> executor : <span class="type">ExecutionContext</span>) <span class="comment">// 隐式参数， 需导入</span></span><br></pre></td></tr></table></figure><p><strong>具体实现代码：</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MainActor</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">ReceiverActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">      <span class="keyword">case</span> msg =&gt; println(msg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 创建ActorSystem, 用来负责创建和监督 Actor</span></span><br><span class="line">    <span class="keyword">val</span> actorSystem: <span class="type">ActorSystem</span> = <span class="type">ActorSystem</span>(<span class="string">&quot;actorSystem&quot;</span>， <span class="type">ConfigFactory</span>.load())</span><br><span class="line">    <span class="comment">// 通过 ActorSystem来加载自定义 Actor对象</span></span><br><span class="line">    <span class="keyword">val</span> receiverActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">ReceiverActor</span>)， <span class="string">&quot;receiverActor&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导入隐式参数和隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> actorSystem.dispatcher</span><br><span class="line">    <span class="keyword">import</span> scala.concurrent.duration._</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过定时器，定时给 ReceiverActor 发送消息</span></span><br><span class="line">    <span class="comment">// 方式 1: 采用提供的 Any 数据类型参数的消息</span></span><br><span class="line">    actorSystem.scheduler.schedule(<span class="number">0</span> seconds,</span><br><span class="line">      <span class="number">2</span> seconds,</span><br><span class="line">      receiverActor,</span><br><span class="line">      <span class="string">&quot;Hello ReceiverActor!， 方式 1...&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方式 2: 采用自定义函数的消息</span></span><br><span class="line">    actorSystem.scheduler.schedule(<span class="number">0</span> seconds, <span class="number">2</span> seconds) &#123;</span><br><span class="line">      receiverActor ! <span class="string">&quot;Hello ReceiverActor!， 方式 2...&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现两个进程间的通信"><a href="#实现两个进程间的通信" class="headerlink" title="实现两个进程间的通信"></a>实现两个进程间的通信</h3><p>基于<code>Akka</code>实现两个<strong>进程</strong>之间发送、接收消息。</p><ol><li><code>WorkerActor</code>启动后去连接<code>MasterActor</code>，并发送消息给<code>MasterActor</code></li><li><code>WorkerActor</code>在接收到消息后，再回复消息给<code>MasterActor</code></li></ol><p><img src="http://chongyan-blog.test.upcdn.net/md-images/image-20220724053601951.png" alt="image-20220724051541509" style="zoom:50%;" /></p><h5 id="MasterActor-scala"><a href="#MasterActor-scala" class="headerlink" title="MasterActor.scala"></a><code>MasterActor.scala</code></h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chongyan.masterAndWorker.master</span><br><span class="line"><span class="keyword">import</span> akka.actor.<span class="type">Actor</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MasterActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setup&quot;</span> =&gt; println(<span class="string">&quot;MasterActor started!&quot;</span>)</span><br><span class="line">    <span class="comment">// 接收 WorkerActor发的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;connect&quot;</span> =&gt;</span><br><span class="line">      println(<span class="string">&quot;MasterActor, received: connect!&quot;</span>)</span><br><span class="line">      <span class="comment">// 给发送者(WorkerActor)返回的回执信息</span></span><br><span class="line">      sender ! <span class="string">&quot;success&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="MasterEntrance-scala"><a href="#MasterEntrance-scala" class="headerlink" title="MasterEntrance.scala"></a><code>MasterEntrance.scala</code></h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chongyan.masterAndWorker.master</span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">MasterEntrance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> actorSystem: <span class="type">ActorSystem</span> = <span class="type">ActorSystem</span>(<span class="string">&quot;actorSystem&quot;</span>， <span class="type">ConfigFactory</span>.load())</span><br><span class="line">    <span class="keyword">val</span> masterActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">MasterActor</span>)， <span class="string">&quot;masterActor&quot;</span>)</span><br><span class="line">    <span class="comment">// 给 MasterActor发送消息</span></span><br><span class="line">    masterActor ! <span class="string">&quot;setup&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="WorkerActor-scala"><a href="#WorkerActor-scala" class="headerlink" title="WorkerActor.scala"></a><code>WorkerActor.scala</code></h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chongyan.masterAndWorker.worker</span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">Actor</span>, <span class="type">ActorSelection</span>&#125;</span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WorkerActor</span> <span class="keyword">extends</span> <span class="title">Actor</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>: <span class="type">Receive</span> = &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;setup&quot;</span> =&gt;</span><br><span class="line">      println(<span class="string">&quot;WorkerActor started!&quot;</span>)</span><br><span class="line">      <span class="comment">// 远程获取 MasterActor</span></span><br><span class="line">      <span class="keyword">val</span> masterActor: <span class="type">ActorSelection</span> = context</span><br><span class="line">        .system</span><br><span class="line">        .actorSelection(<span class="string">&quot;akka.tcp://actorSystem@127.0.0.1:8888/user/masterActor&quot;</span>)</span><br><span class="line">      <span class="comment">// 给 MasterActor发送字符串 connect</span></span><br><span class="line">      masterActor ! <span class="string">&quot;connect&quot;</span></span><br><span class="line">    <span class="comment">// 接收 MasterActor发的消息</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;success&quot;</span> =&gt; println(<span class="string">&quot;MasterActor, received: success!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>WorkerEntrance.scala</code></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.chongyan.masterAndWorker.worker</span><br><span class="line"><span class="keyword">import</span> akka.actor.&#123;<span class="type">ActorRef</span>, <span class="type">ActorSystem</span>, <span class="type">Props</span>&#125;</span><br><span class="line"><span class="keyword">import</span> com.typesafe.config.<span class="type">ConfigFactory</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WorkerEntrance</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> actorSystem: <span class="type">ActorSystem</span> = <span class="type">ActorSystem</span>(<span class="string">&quot;actorSystem&quot;</span>， <span class="type">ConfigFactory</span>.load())</span><br><span class="line">    <span class="keyword">val</span> workerActor: <span class="type">ActorRef</span> = actorSystem.actorOf(<span class="type">Props</span>(<span class="type">WorkerActor</span>)， <span class="string">&quot;workerActor&quot;</span>)</span><br><span class="line">    <span class="comment">// 给 WorkerActor发送消息</span></span><br><span class="line">    workerActor ! <span class="string">&quot;setup&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Akka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 偏函数</title>
      <link href="/2022/12/01/Scala%20%E5%81%8F%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/01/Scala%20%E5%81%8F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="偏函数-partial-function"><a href="#偏函数-partial-function" class="headerlink" title="偏函数(partial function)"></a>偏函数(partial function)</h2><p><strong>这里通过一个例子来了解一下什么是偏函数</strong></p><p><strong>需求:将一个 Any 类型的列表中的数字+1，非数字忽略</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Any</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line"><span class="comment">// 过滤 Int 类型之外的类型</span></span><br><span class="line">.filter(_.isInstanceOf[<span class="type">Int</span>])</span><br><span class="line"><span class="comment">// 将 Any 类型转为 Int 类型</span></span><br><span class="line">.map(_.asInstanceOf[<span class="type">Int</span>])</span><br><span class="line"><span class="comment">// 数字+1</span></span><br><span class="line">.map(_ + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>这里虽然解决了问题，但是太过于麻烦了</strong></p><p><strong>这里还可以通过模式匹配的方法去解决</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.map &#123;</span><br><span class="line">  <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>虽然使用模式匹配比较简洁，但还是不够完美，这里我们就要通过偏函数去达到更加简洁方便的去解决这个问题</strong></p><h3 id="那么什么是偏函数呢"><a href="#那么什么是偏函数呢" class="headerlink" title="那么什么是偏函数呢?"></a><strong>那么什么是偏函数呢?</strong></h3><ol><li>在对<code>符合某个条件</code>时，而不是所有情况进行逻辑操作时，使用偏函数是个不错的选择</li><li>将包括在大括号内的一组 case 语句封装为函数，称之为<code>偏函数</code>，它只会对作用于指定类型的参数或者指定范围值的参数实施计算，超出范围的值会忽略(或者指定处理方式)</li><li>偏函数在 Scala 中是一个特质<code>PartialFunction</code></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:将一个 Any 类型的列表中的数字+1,非数字忽略</span></span><br><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Any</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个偏函数</span></span><br><span class="line"><span class="keyword">val</span> partialFunction: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = x.isInstanceOf[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(v1: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    v1.asInstanceOf[<span class="type">Int</span>] + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用偏函数，使用偏函数不能使用 map,得使用 collect</span></span><br><span class="line"><span class="keyword">val</span> res: <span class="type">List</span>[<span class="type">Int</span>] = list.collect(partialFunction)</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li><code>PartialFunction[Any,Int]</code>中<code>Any</code>表示偏函数接收的是 Any 类型的参数，<code>Int</code>表示偏函数返回类型是 Int </li><li><code>isDefinedAt</code>表示如果返回 true,就会去调用 <code>apply</code> 方法去构建对象实例，如果是 false 则过滤</li><li><code>apply</code> 方法相当于构造器，在这里对传入的值+1,并返回新的集合</li></ol><p><strong>偏函数执行流程:</strong></p><ol><li>遍历 list 所有元素</li><li>然后调用偏函数中的<code>isDefinedAt</code>方法，如果为 true 则调用<code>apply</code>方法，得到list 中每一个被偏函数处理的值</li><li>每得到一个值，就放入到新的集合中，最后返回一个集合</li></ol><h3 id="偏函数的简化方法"><a href="#偏函数的简化方法" class="headerlink" title="偏函数的简化方法"></a>偏函数的简化方法</h3><p>在声明偏函数的时候，需要重写<code>trait</code>中方法，有时候会很麻烦，其实 Scala 提供了简单的方法</p><h4 id="简化方法-1"><a href="#简化方法-1" class="headerlink" title="简化方法 1:"></a>简化方法 1:</h4><p>case 语句可以通过隐式转换转为偏函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partialFunction</span></span>(): <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简化方法-2"><a href="#简化方法-2" class="headerlink" title="简化方法 2:"></a>简化方法 2:</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.collect&#123;<span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 模式匹配</title>
      <link href="/2022/12/01/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%20/"/>
      <url>/2022/12/01/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%20/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-模式匹配"><a href="#Scala-模式匹配" class="headerlink" title="Scala 模式匹配"></a>Scala 模式匹配</h2><h3 id="模式匹配简单示例"><a href="#模式匹配简单示例" class="headerlink" title="模式匹配简单示例"></a>模式匹配简单示例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> oper: <span class="type">Char</span> = &#x27;+&#x27;</span><br><span class="line"><span class="keyword">val</span> n1: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">val</span> n2: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> res: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">oper <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &#x27;+&#x27; =&gt; res = n1 + n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;-&#x27; =&gt; res = n1 - n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;*&#x27; =&gt; res = n1 * n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;/&#x27; =&gt; res = n1 / n2</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;oper error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;res:\t&quot;</span> + res)</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><pre><code>1. match 和 case 是 scala 中模式匹配的关键字1. 如果匹配成功，执行 =&gt; 后的代码块1. 匹配顺序是从上到下的，匹配到就执行对应的代码1. =&gt; 还没的代码块不需要写 break ，会自动退出 match1. 如果都没有匹配到，则会执行 case _ 后的代码</code></pre><h3 id="条件守卫"><a href="#条件守卫" class="headerlink" title="条件守卫"></a>条件守卫</h3><p><strong>如果想要表达<code>匹配某个范围的数据</code>，就需要在模式匹配中增加条件守卫</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line"></span><br><span class="line">flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; println(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; println(<span class="string">&quot;kafka&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; println(<span class="string">&quot;redis&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式变量"><a href="#模式变量" class="headerlink" title="模式变量"></a>模式变量</h3><p>如果在 case 关键字后跟变量，那么 match 表达式的值会赋给那个变量</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;kafka&quot;</span></span><br><span class="line"></span><br><span class="line">flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> value =&gt; println(<span class="string">&quot;value:&quot;</span> + value)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; println(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; println(<span class="string">&quot;kafka&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; println(<span class="string">&quot;redis&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式匹配返回值"><a href="#模式匹配返回值" class="headerlink" title="模式匹配返回值"></a>模式匹配返回值</h3><p>在模式匹配中,match 是一个表达式，因此可以拥有返回值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;kafka&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res: <span class="type">String</span> = flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; <span class="string">&quot;kafka&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; <span class="string">&quot;redis&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h3><p>可以匹配对象任意类型，避免使用 <code>isInstanceOf</code> 和 <code>asInstanceOf</code> 方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> obj: <span class="type">Any</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> int: <span class="type">Int</span> =&gt; println(<span class="string">&quot;Int&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> string: <span class="type">String</span> =&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> map: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>] =&gt; println(<span class="string">&quot;Map[String,String]&quot;</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><pre><code>1. `Map[String,String]` 和 `Map[String,Int]`是两种不同类型2. 在进行类型匹配时，编译器会`预先检测是否有可能的匹配`，如果没有则会报错3. `case int: Int =&gt; println(&quot;Int&quot;)`表示将 `int=obj`，然后再判断类型4. 如果`case _`出现在 match 中间，则表示隐藏变量名，而`不是表示默认匹配`</code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> obj: <span class="type">Any</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Int</span> =&gt; println(<span class="string">&quot;Int&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">String</span> =&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>] =&gt; println(<span class="string">&quot;Map[String,String]&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配数组"><a href="#匹配数组" class="headerlink" title="匹配数组"></a>匹配数组</h3><ol><li><code>Array(0)</code>只匹配一个元素且为 0 的数组</li><li><code>Array(x,y)</code>匹配数组有两个元素，并<code>将两个元素赋值为 x 和 y</code>。可以依次类推<code>Array(x,y,z)...</code></li><li><code>Array(0,_*)</code>匹配数组以 0 开始</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (arr &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">String</span> = arr <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(x, y) =&gt; x + <span class="string">&quot;-&quot;</span> + y</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, _*) =&gt; <span class="string">&quot;以 0 开头的数组&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;什么数组都不是&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">&quot;res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配列表"><a href="#匹配列表" class="headerlink" title="匹配列表"></a>匹配列表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">List</span>(<span class="number">0</span>)， <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>)， <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)， <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> (list &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">String</span> = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: <span class="type">Nil</span> =&gt; <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">case</span> x :: y :: <span class="type">Nil</span> =&gt; x + <span class="string">&quot;-&quot;</span> + y</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: tail =&gt; <span class="string">&quot;0...&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;SomeThings else&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">&quot;res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元组匹配"><a href="#元组匹配" class="headerlink" title="元组匹配"></a>元组匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Product</span>] = <span class="type">Array</span>((<span class="number">0</span>, <span class="number">1</span>)， (<span class="number">1</span>, <span class="number">0</span>)， (<span class="number">1</span>, <span class="number">1</span>)， (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> (pair &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">Any</span> = pair <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, _) =&gt; <span class="string">&quot;0...&quot;</span></span><br><span class="line">    <span class="keyword">case</span> (x, _) =&gt; x</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;others&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象匹配"><a href="#对象匹配" class="headerlink" title="对象匹配"></a>对象匹配</h3><ol><li>case 中对象的<code>unapply</code>方法(提取器)返回 <code>some</code> 集合则为匹配成功</li><li>返回 <code>none</code> 集合则为匹配失败</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span></span><br><span class="line">number <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Square</span>(n) =&gt; println(n)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(z: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] = <span class="type">Some</span>(math.sqrt(z))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(z: <span class="type">Double</span>): <span class="type">Double</span> = z * z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行顺序:</strong></p><ol><li>在构建对象时<code>apply</code>会被调用</li><li><code>case Square(n)</code> 语句会默认调用<code>unapply</code>方法<code>(对象提取器)</code></li><li><code>number</code>会被作为参数传递给<code>def unapply(z: Double)</code>中的 z 形参</li><li>如果返回的是<code>Some</code>集合，则<code>unapply提取器</code>返回的结果会返回个<code>n</code>这个形参</li></ol><h3 id="变量声明中的模式"><a href="#变量声明中的模式" class="headerlink" title="变量声明中的模式"></a>变量声明中的模式</h3><p>match 中的每一个 case 都可以单独提取出来</p><ol><li>x = 1，y = 2</li><li>q = BigInt(10) / 3，r = BigInt(10) % 3</li><li>first = 1，second = 2</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (x, y): (<span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> (q, r): (<span class="type">BigInt</span>, <span class="type">BigInt</span>) = <span class="type">BigInt</span>(<span class="number">10</span>) /% <span class="number">3</span></span><br><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> <span class="type">Array</span>(first, second, _*) = array</span><br></pre></td></tr></table></figure><h3 id="for表达式中的模式"><a href="#for表达式中的模式" class="headerlink" title="for表达式中的模式"></a>for表达式中的模式</h3><p>for 循环中也能进行模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = <span class="type">Map</span>(<span class="string">&quot;A&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;B&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;C&quot;</span> -&gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map) &#123;</span><br><span class="line">  println(k + <span class="string">&quot;-&gt;&quot;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, <span class="number">0</span>) &lt;- map) &#123;</span><br><span class="line">  println(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map <span class="keyword">if</span> k.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">  println(k + <span class="string">&quot;-&gt;&quot;</span> + v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样例类"><a href="#样例类" class="headerlink" title="样例类"></a>样例类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dollar</span>(<span class="params">value:<span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span>(<span class="params">value:<span class="type">Double</span>,unit:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NoAmount</span> <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>样例类仍然是类</li><li>样例类用<code>case 关键字进行声明</code>  </li><li>样例类是为<code>模式匹配而优化</code>的类</li><li>构造器中的每一个参数都成为 val (<code>除非被显式的声明为 var</code>)</li><li>在样例类对应的伴生对象中<code>提供 apply 方法</code>，可以不使用 new关键字就能构造出相应的对象</li><li><code>提供 unapply 方法</code>让模式匹配可以工作</li><li>将<code>自动生成 toString、equals、hashcode 和 copy方法</code></li><li>除此之外，样例类和其他类型完全一致，仍可以添加字段和方法扩展他们</li></ol><h3 id="匹配嵌套结果"><a href="#匹配嵌套结果" class="headerlink" title="匹配嵌套结果"></a>匹配嵌套结果</h3><p><strong>类似于正则表达式</strong></p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sale: <span class="type">Bundle</span> = <span class="type">Bundle</span>(<span class="string">&quot;书籍&quot;</span>， <span class="number">10</span>, <span class="type">Book</span>(<span class="string">&quot;漫画&quot;</span>， <span class="number">40</span>)， <span class="type">Bundle</span>(<span class="string">&quot;文学作品&quot;</span>， <span class="number">20</span>, <span class="type">Book</span>(<span class="string">&quot;阳关&quot;</span>， <span class="number">80</span>)， <span class="type">Book</span>(<span class="string">&quot;围城&quot;</span>， <span class="number">30</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res1: <span class="type">String</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, <span class="type">Book</span>(desc, _)， _*) =&gt; desc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res2: <span class="type">Any</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, book<span class="meta">@Book</span>(_, _)， rest@_*) =&gt; (book, rest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res3: <span class="type">Any</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, book<span class="meta">@Book</span>(_, _)， rest) =&gt; (book, rest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">desc: <span class="type">String</span>, price: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Bundle</span>(<span class="params">desc: <span class="type">String</span>, discount: <span class="type">Double</span>, item: <span class="type">Item</span>*</span>) <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>通过签到匹配获取到书籍的 desc</li><li>通过@表示法将嵌套的值绑定到变量， _* 绑定剩余 Iterm 到 rest</li><li>如果剩余内容只有一个时，可以不用写，直接通过 rest 变量获取剩余内容</li></ol><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><ol><li>如果想让 case 类的所有子类都必须在声明该类的<code>相同源文件中定义</code>,可以将样例类通过超类声明为<code>sealed</code>,这个超类称之为密封类</li><li>密封就是不能在其他文件中定义子类</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Akka 构建简单的 Spark 通信框架</title>
      <link href="/2022/12/01/Scala%20%E6%B3%9B%E5%9E%8B/"/>
      <url>/2022/12/01/Scala%20%E6%B3%9B%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h2><p>泛型的意思是 泛指某种具体的数据类型，在 Scala 中泛型用 <code>[数据类型]</code> 表示。</p><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>通过<code>getMiddleElement</code>方法获取任意数据类型的数组中的中间元素</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMiddleElement</span></span>[<span class="type">T</span>](array: <span class="type">Array</span>[<span class="type">T</span>]): <span class="type">T</span> = &#123;</span><br><span class="line">  array(array.length / <span class="number">2</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><p>定义一个<code>Pair</code>泛型类，这个类中包含两个字段且字段类型不固定</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[<span class="type">T</span>](<span class="params">var x: <span class="type">T</span>, var y: <span class="type">T</span></span>)</span></span><br></pre></td></tr></table></figure><h3 id="泛型特质"><a href="#泛型特质" class="headerlink" title="泛型特质"></a>泛型特质</h3><p><code>Loggers</code>是一个泛型特质，<code>ConsoleLogger</code>继承了<code>Loggers</code>，并重写了其 x 字段和 show 方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Logger</span>[<span class="type">T</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">val</span> x: <span class="type">T</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(y: <span class="type">T</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ConsoleLogger</span> <span class="keyword">extends</span> <span class="title">Logger</span>[<span class="type">String</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> x: <span class="type">String</span> = <span class="string">&quot;log&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">show</span></span>(y: <span class="type">String</span>): <span class="type">Unit</span> = println(y)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型上下界"><a href="#泛型上下界" class="headerlink" title="泛型上下界"></a>泛型上下界</h3><h4 id="泛型上界"><a href="#泛型上界" class="headerlink" title="泛型上界"></a>泛型上界</h4><p>使用 <code>T &lt;: 类型名</code> 表示给类型添加一个上界，表示该类型必须是 T 或 T 的子类。</p><h4 id="泛型下界"><a href="#泛型下界" class="headerlink" title="泛型下界"></a>泛型下界</h4><p>使用 <code>T &gt;: 类型名</code> 表示给类型添加一个下界，表示该类型必须是 T 或 T 的父类。</p><h4 id="泛型上下界-1"><a href="#泛型上下界-1" class="headerlink" title="泛型上下界"></a>泛型上下界</h4><p>如果泛型既有上界又有下界，下界写在前面，<code>[T &gt;: A &lt;: B]</code></p><h3 id="协变、逆变、非变"><a href="#协变、逆变、非变" class="headerlink" title="协变、逆变、非变"></a>协变、逆变、非变</h3><ul><li>协变：类 A 和 类 B 之间是父子类关系，Pair[A] 和 Pari[B] 之间也有父子关系。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[+<span class="type">T</span>]</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>逆变：类 A 和 类 B 之间是父子类关系，但 Pair[A] 和 Pari[B] 之间是子父关系。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class Pair[-T]&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>非变：类 A 和 类 B 之间是父子类关系，Pair[A] 和 Pari[B] 之间没有任何关系。</li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pair</span>[<span class="type">T</span>]</span>&#123;&#125; <span class="comment">//默认类型是非变的</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Akka 构建简单的 Spark 通信框架</title>
      <link href="/2022/12/01/Scala%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%8F%8A%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
      <url>/2022/12/01/Scala%20%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0%E5%8F%8A%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="高阶函数-high-order-function-及-函数柯里化"><a href="#高阶函数-high-order-function-及-函数柯里化" class="headerlink" title="高阶函数(high-order function) 及 函数柯里化"></a>高阶函数(high-order function) 及 函数柯里化</h2><p>能够接收函数作为参数的函数，叫做高阶函数<code>(high-order function)</code></p><p>可以使应用程序更加健壮</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">highFunc</span></span>(f: <span class="type">Double</span> =&gt; <span class="type">Double</span>, num: <span class="type">Double</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  f(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(num: <span class="type">Double</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">  num + num</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">highFunc(sum,<span class="number">6.0</span>)</span><br></pre></td></tr></table></figure><p>高阶函数可以接收多个函数作为参数</p><p><strong>高阶函数可以返回一个函数</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minusxy</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">  <span class="comment">// 匿名函数</span></span><br><span class="line">  (y: <span class="type">Int</span>) =&gt; x - y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出结果是 8 - 5 = 3</span></span><br><span class="line">println(minusxy(<span class="number">8</span>)(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li><code>minusxy</code> 是高阶函数，返回了一个匿名函数</li><li>返回的匿名函数 <code>(y: Int) =&gt; x - y</code></li><li>返回的匿名函数可以使用变量接收</li></ol><h3 id="闭包-closure"><a href="#闭包-closure" class="headerlink" title="闭包(closure)"></a>闭包(closure)</h3><p><strong>闭包就是<code>一个函数</code>和与其<code>相关的引用环境</code>组合的一个<code>整体</code></strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minusxy</span></span>(x: <span class="type">Int</span>) = (y: <span class="type">Int</span>) =&gt; x - y</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> closureFunc: <span class="type">Int</span> =&gt; <span class="type">Int</span> = minusxy(<span class="number">20</span>)</span><br><span class="line">println(closureFunc(<span class="number">5</span>)) <span class="comment">// 15</span></span><br><span class="line">println(closureFunc(<span class="number">10</span>)) <span class="comment">// 20</span></span><br></pre></td></tr></table></figure><ol><li><code>(y: Int) =&gt; x - y</code>返回的是一个匿名函数，因为该函数引用到了函数外的 x ，那么该函数和 x 整体形成了一个闭包</li><li>用对象的方式理解的话，返回的函数是一个对象，而 x 是该对象的一个字段，它们共同形成了一个闭包</li><li>当多次调用闭包时，使用的 x 其实是同一个，所以 x 不变</li><li>在使用闭包时，主要看返回函数引用了哪些函数外的变量，因为它们会组合成一个整体，从而形成一个闭包</li></ol><h3 id="函数柯里化-curry"><a href="#函数柯里化-curry" class="headerlink" title="函数柯里化(curry)"></a>函数柯里化(curry)</h3><ol><li>在函数编程中，接收<code>多个参数的函数</code>都可以转化为接收<code>单个参数的函数</code>，这个转化过程就叫做柯里化</li><li>柯里化就是证明了函数只需要一个参数而已</li><li>柯里化就是以<code>函数为主体这种思想</code>发展的必然结果</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minusxy</span></span>(x: <span class="type">Int</span>) = (y: <span class="type">Int</span>) =&gt; x - y</span><br><span class="line"></span><br><span class="line">println(minusxy(<span class="number">8</span>)(<span class="number">5</span>)) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="抽象控制"><a href="#抽象控制" class="headerlink" title="抽象控制"></a>抽象控制</h3><ol><li>参数是函数</li><li><p>函数参数没有输入也没有返回值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">runInThread</span></span>(func: =&gt; <span class="type">Unit</span>): <span class="type">Thread</span> = &#123;</span><br><span class="line">  <span class="keyword">new</span> <span class="type">Thread</span> &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      func</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runInThread &#123;</span><br><span class="line">  println(<span class="string">&quot;线程启动&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 Akka 构建简单的 Spark 通信框架</title>
      <link href="/2022/12/01/%E9%80%9A%E8%BF%87%20Akka%20%E6%9E%84%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%20Spark%20%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
      <url>/2022/12/01/%E9%80%9A%E8%BF%87%20Akka%20%E6%9E%84%E5%BB%BA%E7%AE%80%E5%8D%95%E7%9A%84%20Spark%20%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="通过-Akka-构建简单的-Spark-通信框架"><a href="#通过-Akka-构建简单的-Spark-通信框架" class="headerlink" title="通过 Akka 构建简单的 Spark 通信框架"></a>通过 Akka 构建简单的 Spark 通信框架</h2><p><strong>实现思路：</strong></p><ol><li>构建<code>Master</code>、<code>Worker</code>阶段</li></ol><ul><li>构建 <code>Master ActorSystem、 Actor</code></li><li>构建 <code>Worker ActorSystem、 Actor</code></li></ul><ol><li><code>Worker</code>注册阶段</li></ol><ul><li><code>Worker</code>进行向<code>Master</code>注册(将自己的<code>ID</code>、<code>CPU 核数</code>、<code>内存大小(MB)</code>发送给 <code>Master</code>)</li></ul><ol><li><code>Worke</code>定时发送心跳阶段</li></ol><ul><li><code>Worke</code>定期向<code>Master</code>发送心跳消息</li></ul><ol><li><code>Master</code>定时心跳检测阶段</li></ol><ul><li><code>Master</code>定期检测<code>Worker</code>心跳,将一些超时的<code>Worker</code>移除,并对<code>Worker</code>按照内存进行倒序排列</li></ul><ol><li>多个<code>Worker</code>测试阶段</li></ol><ul><li>启动多个<code>Worker</code>,查看是否能注册成功,并停止某个<code>Worker</code>查看是否能正常移除</li></ul><p><img src="http://chongyan-blog.test.upcdn.net/md-images/image-20220724061659506.png" alt="image-20220724061659506" style="zoom:50%;" /></p>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
            <tag> Akka </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
