<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Scala 模式匹配</title>
      <link href="/2022/12/02/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%20/"/>
      <url>/2022/12/02/Scala%20%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D%20/</url>
      
        <content type="html"><![CDATA[<h2 id="Scala-模式匹配"><a href="#Scala-模式匹配" class="headerlink" title="Scala 模式匹配"></a>Scala 模式匹配</h2><h3 id="模式匹配简单示例"><a href="#模式匹配简单示例" class="headerlink" title="模式匹配简单示例"></a>模式匹配简单示例</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> oper: <span class="type">Char</span> = &#x27;+&#x27;</span><br><span class="line"><span class="keyword">val</span> n1: <span class="type">Int</span> = <span class="number">20</span></span><br><span class="line"><span class="keyword">val</span> n2: <span class="type">Int</span> = <span class="number">10</span></span><br><span class="line"><span class="keyword">var</span> res: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">oper <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> &#x27;+&#x27; =&gt; res = n1 + n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;-&#x27; =&gt; res = n1 - n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;*&#x27; =&gt; res = n1 * n2</span><br><span class="line">  <span class="keyword">case</span> &#x27;/&#x27; =&gt; res = n1 / n2</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;oper error&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;res:\t&quot;</span> + res)</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><pre><code>1. match 和 case 是 scala 中模式匹配的关键字1. 如果匹配成功，执行 =&gt; 后的代码块1. 匹配顺序是从上到下的，匹配到就执行对应的代码1. =&gt; 还没的代码块不需要写 break ，会自动退出 match1. 如果都没有匹配到，则会执行 case _ 后的代码</code></pre><h3 id="条件守卫"><a href="#条件守卫" class="headerlink" title="条件守卫"></a>条件守卫</h3><p><strong>如果想要表达<code>匹配某个范围的数据</code>，就需要在模式匹配中增加条件守卫</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;mysql&quot;</span></span><br><span class="line"></span><br><span class="line">flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; println(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; println(<span class="string">&quot;kafka&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; println(<span class="string">&quot;redis&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式变量"><a href="#模式变量" class="headerlink" title="模式变量"></a>模式变量</h3><p>如果在 case 关键字后跟变量，那么 match 表达式的值会赋给那个变量</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;kafka&quot;</span></span><br><span class="line"></span><br><span class="line">flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> value =&gt; println(<span class="string">&quot;value:&quot;</span> + value)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; println(<span class="string">&quot;mysql&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; println(<span class="string">&quot;kafka&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; println(<span class="string">&quot;redis&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="模式匹配返回值"><a href="#模式匹配返回值" class="headerlink" title="模式匹配返回值"></a>模式匹配返回值</h3><p>在模式匹配中,match 是一个表达式，因此可以拥有返回值</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> flag: <span class="type">String</span> = <span class="string">&quot;kafka&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res: <span class="type">String</span> = flag <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;mysql&quot;</span>) =&gt; <span class="string">&quot;mysql&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;kafka&quot;</span>) =&gt; <span class="string">&quot;kafka&quot;</span></span><br><span class="line">  <span class="keyword">case</span> _ <span class="keyword">if</span> flag.equals(<span class="string">&quot;redis&quot;</span>) =&gt; <span class="string">&quot;redis&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型匹配"><a href="#类型匹配" class="headerlink" title="类型匹配"></a>类型匹配</h3><p>可以匹配对象任意类型，避免使用 <code>isInstanceOf</code> 和 <code>asInstanceOf</code> 方法</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> obj: <span class="type">Any</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> int: <span class="type">Int</span> =&gt; println(<span class="string">&quot;Int&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> string: <span class="type">String</span> =&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> map: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>] =&gt; println(<span class="string">&quot;Map[String,String]&quot;</span>)</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意:</strong></p><pre><code>1. `Map[String,String]` 和 `Map[String,Int]`是两种不同类型2. 在进行类型匹配时，编译器会`预先检测是否有可能的匹配`，如果没有则会报错3. `case int: Int =&gt; println(&quot;Int&quot;)`表示将 `int=obj`，然后再判断类型4. 如果`case _`出现在 match 中间，则表示隐藏变量名，而`不是表示默认匹配`</code></pre><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> obj: <span class="type">Any</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">obj <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Int</span> =&gt; println(<span class="string">&quot;Int&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">String</span> =&gt; println(<span class="string">&quot;String&quot;</span>)</span><br><span class="line">  <span class="keyword">case</span> _: <span class="type">Map</span>[<span class="type">String</span>,<span class="type">String</span>] =&gt; println(<span class="string">&quot;Map[String,String]&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配数组"><a href="#匹配数组" class="headerlink" title="匹配数组"></a>匹配数组</h3><ol><li><code>Array(0)</code>只匹配一个元素且为 0 的数组</li><li><code>Array(x,y)</code>匹配数组有两个元素，并<code>将两个元素赋值为 x 和 y</code>。可以依次类推<code>Array(x,y,z)...</code></li><li><code>Array(0,_*)</code>匹配数组以 0 开始</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Array</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">Array</span>(<span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>)， <span class="type">Array</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (arr &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">String</span> = arr <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>) =&gt; <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(x, y) =&gt; x + <span class="string">&quot;-&quot;</span> + y</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Array</span>(<span class="number">0</span>, _*) =&gt; <span class="string">&quot;以 0 开头的数组&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;什么数组都不是&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">&quot;res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="匹配列表"><a href="#匹配列表" class="headerlink" title="匹配列表"></a>匹配列表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">List</span>[<span class="type">Int</span>]] = <span class="type">Array</span>(<span class="type">List</span>(<span class="number">0</span>)， <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>)， <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)， <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line"><span class="keyword">for</span> (list &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">String</span> = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: <span class="type">Nil</span> =&gt; <span class="string">&quot;0&quot;</span></span><br><span class="line">    <span class="keyword">case</span> x :: y :: <span class="type">Nil</span> =&gt; x + <span class="string">&quot;-&quot;</span> + y</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: tail =&gt; <span class="string">&quot;0...&quot;</span></span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;SomeThings else&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">&quot;res = &quot;</span> + res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="元组匹配"><a href="#元组匹配" class="headerlink" title="元组匹配"></a>元组匹配</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Product</span>] = <span class="type">Array</span>((<span class="number">0</span>, <span class="number">1</span>)， (<span class="number">1</span>, <span class="number">0</span>)， (<span class="number">1</span>, <span class="number">1</span>)， (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))</span><br><span class="line"><span class="keyword">for</span> (pair &lt;- array) &#123;</span><br><span class="line">  <span class="keyword">val</span> res: <span class="type">Any</span> = pair <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, _) =&gt; <span class="string">&quot;0...&quot;</span></span><br><span class="line">    <span class="keyword">case</span> (x, _) =&gt; x</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;others&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(res)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象匹配"><a href="#对象匹配" class="headerlink" title="对象匹配"></a>对象匹配</h3><ol><li>case 中对象的<code>unapply</code>方法(提取器)返回 <code>some</code> 集合则为匹配成功</li><li>返回 <code>none</code> 集合则为匹配失败</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span></span><br><span class="line">number <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Square</span>(n) =&gt; println(n)</span><br><span class="line">  <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(z: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] = <span class="type">Some</span>(math.sqrt(z))</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(z: <span class="type">Double</span>): <span class="type">Double</span> = z * z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行顺序:</strong></p><ol><li>在构建对象时<code>apply</code>会被调用</li><li><code>case Square(n)</code> 语句会默认调用<code>unapply</code>方法<code>(对象提取器)</code></li><li><code>number</code>会被作为参数传递给<code>def unapply(z: Double)</code>中的 z 形参</li><li>如果返回的是<code>Some</code>集合，则<code>unapply提取器</code>返回的结果会返回个<code>n</code>这个形参</li></ol><h3 id="变量声明中的模式"><a href="#变量声明中的模式" class="headerlink" title="变量声明中的模式"></a>变量声明中的模式</h3><p>match 中的每一个 case 都可以单独提取出来</p><ol><li>x = 1，y = 2</li><li>q = BigInt(10) / 3，r = BigInt(10) % 3</li><li>first = 1，second = 2</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> (x, y): (<span class="type">Int</span>, <span class="type">Int</span>) = (<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> (q, r): (<span class="type">BigInt</span>, <span class="type">BigInt</span>) = <span class="type">BigInt</span>(<span class="number">10</span>) /% <span class="number">3</span></span><br><span class="line"><span class="keyword">val</span> array: <span class="type">Array</span>[<span class="type">Int</span>] = <span class="type">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">val</span> <span class="type">Array</span>(first, second, _*) = array</span><br></pre></td></tr></table></figure><h3 id="for表达式中的模式"><a href="#for表达式中的模式" class="headerlink" title="for表达式中的模式"></a>for表达式中的模式</h3><p>for 循环中也能进行模式匹配</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> map: <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Int</span>] = <span class="type">Map</span>(<span class="string">&quot;A&quot;</span> -&gt; <span class="number">1</span>, <span class="string">&quot;B&quot;</span> -&gt; <span class="number">2</span>, <span class="string">&quot;C&quot;</span> -&gt; <span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map) &#123;</span><br><span class="line">  println(k + <span class="string">&quot;-&gt;&quot;</span> + v)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, <span class="number">0</span>) &lt;- map) &#123;</span><br><span class="line">  println(k)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((k, v) &lt;- map <span class="keyword">if</span> k.equals(<span class="string">&quot;A&quot;</span>)) &#123;</span><br><span class="line">  println(k + <span class="string">&quot;-&gt;&quot;</span> + v)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="样例类"><a href="#样例类" class="headerlink" title="样例类"></a>样例类</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dollar</span>(<span class="params">value:<span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span>(<span class="params">value:<span class="type">Double</span>,unit:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NoAmount</span> <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>样例类仍然是类</li><li>样例类用<code>case 关键字进行声明</code>  </li><li>样例类是为<code>模式匹配而优化</code>的类</li><li>构造器中的每一个参数都成为 val (<code>除非被显式的声明为 var</code>)</li><li>在样例类对应的伴生对象中<code>提供 apply 方法</code>，可以不使用 new关键字就能构造出相应的对象</li><li><code>提供 unapply 方法</code>让模式匹配可以工作</li><li>将<code>自动生成 toString、equals、hashcode 和 copy方法</code></li><li>除此之外，样例类和其他类型完全一致，仍可以添加字段和方法扩展他们</li></ol><h3 id="匹配嵌套结果"><a href="#匹配嵌套结果" class="headerlink" title="匹配嵌套结果"></a>匹配嵌套结果</h3><p><strong>类似于正则表达式</strong></p> <figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sale: <span class="type">Bundle</span> = <span class="type">Bundle</span>(<span class="string">&quot;书籍&quot;</span>， <span class="number">10</span>, <span class="type">Book</span>(<span class="string">&quot;漫画&quot;</span>， <span class="number">40</span>)， <span class="type">Bundle</span>(<span class="string">&quot;文学作品&quot;</span>， <span class="number">20</span>, <span class="type">Book</span>(<span class="string">&quot;阳关&quot;</span>， <span class="number">80</span>)， <span class="type">Book</span>(<span class="string">&quot;围城&quot;</span>， <span class="number">30</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res1: <span class="type">String</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, <span class="type">Book</span>(desc, _)， _*) =&gt; desc</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res2: <span class="type">Any</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, book<span class="meta">@Book</span>(_, _)， rest@_*) =&gt; (book, rest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res3: <span class="type">Any</span> = sale <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Bundle</span>(_, _, book<span class="meta">@Book</span>(_, _)， rest) =&gt; (book, rest)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span>(<span class="params">desc: <span class="type">String</span>, price: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Bundle</span>(<span class="params">desc: <span class="type">String</span>, discount: <span class="type">Double</span>, item: <span class="type">Item</span>*</span>) <span class="keyword">extends</span> <span class="title">Item</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li>通过签到匹配获取到书籍的 desc</li><li>通过@表示法将嵌套的值绑定到变量， _* 绑定剩余 Iterm 到 rest</li><li>如果剩余内容只有一个时，可以不用写，直接通过 rest 变量获取剩余内容</li></ol><h3 id="密封类"><a href="#密封类" class="headerlink" title="密封类"></a>密封类</h3><ol><li>如果想让 case 类的所有子类都必须在声明该类的<code>相同源文件中定义</code>,可以将样例类通过超类声明为<code>sealed</code>,这个超类称之为密封类</li><li>密封就是不能在其他文件中定义子类</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala 偏函数</title>
      <link href="/2022/12/02/Scala%20%E5%81%8F%E5%87%BD%E6%95%B0/"/>
      <url>/2022/12/02/Scala%20%E5%81%8F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="偏函数-partial-function"><a href="#偏函数-partial-function" class="headerlink" title="偏函数(partial function)"></a>偏函数(partial function)</h2><p><strong>这里通过一个例子来了解一下什么是偏函数</strong></p><p><strong>需求:将一个 Any 类型的列表中的数字+1，非数字忽略</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Any</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line">list</span><br><span class="line"><span class="comment">// 过滤 Int 类型之外的类型</span></span><br><span class="line">.filter(_.isInstanceOf[<span class="type">Int</span>])</span><br><span class="line"><span class="comment">// 将 Any 类型转为 Int 类型</span></span><br><span class="line">.map(_.asInstanceOf[<span class="type">Int</span>])</span><br><span class="line"><span class="comment">// 数字+1</span></span><br><span class="line">.map(_ + <span class="number">1</span>)</span><br></pre></td></tr></table></figure><p><strong>这里虽然解决了问题，但是太过于麻烦了</strong></p><p><strong>这里还可以通过模式匹配的方法去解决</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list.map &#123;</span><br><span class="line">  <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span></span><br><span class="line">  <span class="keyword">case</span> _ =&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>虽然使用模式匹配比较简洁，但还是不够完美，这里我们就要通过偏函数去达到更加简洁方便的去解决这个问题</strong></p><h3 id="那么什么是偏函数呢"><a href="#那么什么是偏函数呢" class="headerlink" title="那么什么是偏函数呢?"></a><strong>那么什么是偏函数呢?</strong></h3><ol><li>在对<code>符合某个条件</code>时，而不是所有情况进行逻辑操作时，使用偏函数是个不错的选择</li><li>将包括在大括号内的一组 case 语句封装为函数，称之为<code>偏函数</code>，它只会对作用于指定类型的参数或者指定范围值的参数实施计算，超出范围的值会忽略(或者指定处理方式)</li><li>偏函数在 Scala 中是一个特质<code>PartialFunction</code></li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需求:将一个 Any 类型的列表中的数字+1,非数字忽略</span></span><br><span class="line"><span class="keyword">val</span> list: <span class="type">List</span>[<span class="type">Any</span>] = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;hello&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个偏函数</span></span><br><span class="line"><span class="keyword">val</span> partialFunction: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = x.isInstanceOf[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(v1: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    v1.asInstanceOf[<span class="type">Int</span>] + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用偏函数，使用偏函数不能使用 map,得使用 collect</span></span><br><span class="line"><span class="keyword">val</span> res: <span class="type">List</span>[<span class="type">Int</span>] = list.collect(partialFunction)</span><br></pre></td></tr></table></figure><p><strong>说明:</strong></p><ol><li><code>PartialFunction[Any,Int]</code>中<code>Any</code>表示偏函数接收的是 Any 类型的参数，<code>Int</code>表示偏函数返回类型是 Int </li><li><code>isDefinedAt</code>表示如果返回 true,就会去调用 <code>apply</code> 方法去构建对象实例，如果是 false 则过滤</li><li><code>apply</code> 方法相当于构造器，在这里对传入的值+1,并返回新的集合</li></ol><p><strong>偏函数执行流程:</strong></p><ol><li>遍历 list 所有元素</li><li>然后调用偏函数中的<code>isDefinedAt</code>方法，如果为 true 则调用<code>apply</code>方法，得到list 中每一个被偏函数处理的值</li><li>每得到一个值，就放入到新的集合中，最后返回一个集合</li></ol><h3 id="偏函数的简化方法"><a href="#偏函数的简化方法" class="headerlink" title="偏函数的简化方法"></a>偏函数的简化方法</h3><p>在声明偏函数的时候，需要重写<code>trait</code>中方法，有时候会很麻烦，其实 Scala 提供了简单的方法</p><h4 id="简化方法-1"><a href="#简化方法-1" class="headerlink" title="简化方法 1:"></a>简化方法 1:</h4><p>case 语句可以通过隐式转换转为偏函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">partialFunction</span></span>(): <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简化方法-2"><a href="#简化方法-2" class="headerlink" title="简化方法 2:"></a>简化方法 2:</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.collect&#123;<span class="keyword">case</span> x: <span class="type">Int</span> =&gt; x + <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
